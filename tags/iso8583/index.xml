<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>iso8583 on Nukus Blog</title>
    <link>nayibor.github.io/tags/iso8583/</link>
    <description>Recent content in iso8583 on Nukus Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>nayibor@gmail.com (Nuku Ameyibor)</managingEditor>
    <webMaster>nayibor@gmail.com (Nuku Ameyibor)</webMaster>
    <lastBuildDate>Mon, 01 Jun 2020 00:54:24 +0200</lastBuildDate><atom:link href="nayibor.github.io/tags/iso8583/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Library for parsing iso8583 messages in erlang</title>
      <link>nayibor.github.io/posts/c33083b29ef6e62daebc9459653f84b9/</link>
      <pubDate>Mon, 01 Jun 2020 00:54:24 +0200</pubDate>
      <author>nayibor@gmail.com (Nuku Ameyibor)</author>
      <guid>nayibor.github.io/posts/c33083b29ef6e62daebc9459653f84b9/</guid>
      <description>i have been working on an iso8583 parsing library.
its written in erlang but can be used in erlang,elixir,lfe,etc.. basically all beam languages. this library can be used for packing and unpacking iso8583 financial messages.
It accepts a specification file which contains info about fields,mti,bitmap for your messages. The specification has info such as header length for various fields,padding info for fields,etc&amp;hellip; This specification information is then used for packing/unpacking iso8583 formatted messages.</description>
    </item>
    
    <item>
      <title>Parsing iso8583 messages Part 2</title>
      <link>nayibor.github.io/posts/4948d52595d68beab6dd3a919db6d115/</link>
      <pubDate>Thu, 22 Dec 2016 10:54:24 +0200</pubDate>
      <author>nayibor@gmail.com (Nuku Ameyibor)</author>
      <guid>nayibor.github.io/posts/4948d52595d68beab6dd3a919db6d115/</guid>
      <description>Today we will be showing how to extract the various components out of an iso string. The combination of a tcp server as well as code to extract the iso message components and send it for further processing is what is popularly called an interface server in payment processing . Specifically the components we are interested in are
message type indicator also known as mti bitmap data elements The code snippets used for this post is in this git repository.</description>
    </item>
    
    <item>
      <title>Parsing iso8583 messages Part 1</title>
      <link>nayibor.github.io/posts/73e0ec2ac943bfecb47acbe2e603f814/</link>
      <pubDate>Mon, 12 Dec 2016 07:57:26 +0000</pubDate>
      <author>nayibor@gmail.com (Nuku Ameyibor)</author>
      <guid>nayibor.github.io/posts/73e0ec2ac943bfecb47acbe2e603f814/</guid>
      <description>Today we are going to talk about creating a tcp server to parse iso messages using erlang .
This tutorial explains the very basic of creating tcp servers in erlang . there are better specialized libraries out there (ranch) for creating tcp servers and pools of them but this is very basic and we need just a simple tcp server to show how to process incoming iso messages . We will be using the 1993 iso8583 ascii protocol format.</description>
    </item>
    
    <item>
      <title>Iso8583  message structure</title>
      <link>nayibor.github.io/posts/ddf349de5c9c5cf29af2e17bc71724b8/</link>
      <pubDate>Mon, 05 Dec 2016 07:55:57 +0000</pubDate>
      <author>nayibor@gmail.com (Nuku Ameyibor)</author>
      <guid>nayibor.github.io/posts/ddf349de5c9c5cf29af2e17bc71724b8/</guid>
      <description>alloha.
at last i have been able to get my lazy behind to write a blog post on this.
About time :).
This will be the first in a series about parsing iso8583 financial messages using erlang.
we will get to know
about iso8583 and the message structure receiving iso 8583 messages over the wire using erlang tcp server and parsing the message . parsing those messages in various formats(text(acii),binary,custom format).</description>
    </item>
    
  </channel>
</rss>
