<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Iso8583 on Code Musings</title>
    <link>https://nayibor.github.io/tags/iso8583/index.xml</link>
    <description>Recent content in Iso8583 on Code Musings</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="https://nayibor.github.io/tags/iso8583/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Parsing iso8583 messages Part 2</title>
      <link>https://nayibor.github.io/post/4948d52595d68beab6dd3a919db6d115/</link>
      <pubDate>Thu, 22 Dec 2016 10:54:24 +0200</pubDate>
      
      <guid>https://nayibor.github.io/post/4948d52595d68beab6dd3a919db6d115/</guid>
      <description>&lt;p&gt;Today we will be showing how to  extract the various components out of an iso string.
&lt;br&gt;
The combination of a tcp server as well as code to extract the  iso message components
and send it for further processing is what is popularly called an interface server in payment processing .
&lt;/br&gt;
Specifically the components we are interested in are
&lt;ul&gt;
&lt;li&gt;message type indicator also known as mti&lt;/li&gt;
&lt;li&gt;bitmap&lt;/li&gt;
&lt;li&gt;data elements&lt;/li&gt;
&lt;/ul&gt;
 The code snippets  used for this post is in this  git &amp;nbsp;&lt;a href=&#34;https://github.com/nayibor/iso_process_tut_repo&#34;&gt;&lt;i&gt;repository&lt;/i&gt;&lt;/a&gt;.
 Also the 1993 ascii protocol will be used here as well as erlang  programming language for the code explanations . So git clone the repository,cd to &lt;strong&gt;iso_process_tut_repo&lt;/strong&gt; and fire up your erlang vm and lets begin !!.
&lt;p&gt;Consider the message below&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;1200F230040102B000000000000004000000&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;1048468112122012340000100000001107221800&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;000001161204171926FABCDE123ABD06414243&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;000termid1210Community106A5DFGR1112341234234&lt;/b&gt;&lt;/p&gt;&lt;p&gt;
the iso message in this case is an ascii string(erlang has no concept of strings just a list of unicode points).
The function below is what processes the messages and returns a map containing the various fields of the message as well the mti and bitmap
&lt;blockquote&gt;
    &lt;p&gt;
-spec process_message([{list | binary,pos_integer()}])-&amp;gt;map().&lt;br /&gt;
    &lt;/p&gt;
    &lt;p&gt;
        process_message({binary,Rest})-&amp;gt;
    &lt;/p&gt;
&lt;/blockquote&gt;&lt;br /&gt;
the first statement converts the string to a binary.
Binary strings or binaries store data in a more space efficient manner and has more efficient functions for handling large binary data.
&lt;blockquote&gt;
    &lt;p&gt;
        Bin_message = erlang:list_to_binary(Rest),%%this gives &amp;lt;&amp;lt;&amp;ldquo;01581200F230040102B&amp;hellip;&amp;rdquo;&amp;gt;&amp;gt;
    &lt;/p&gt;
&lt;/blockquote&gt;&lt;br /&gt;
the next step is to find the mti which is made up of the first 4 digits.We do that and then store the mti along with with some metadata in a map.
the &lt;strong&gt;?MTI_SIZE&lt;/strong&gt; is macro which is defined at the top of the file  and is equal to 4.&lt;br /&gt;
&lt;blockquote&gt;
    &lt;p&gt;
        Mti = binary:part(Bin_message,0,?MTI_SIZE),%%this gives &amp;lt;&amp;lt;&amp;ldquo;1200&amp;rdquo;&amp;gt;&amp;gt;
    &lt;/p&gt;&lt;p&gt;
        Mti_Data_Element = maps:from_list([{ftype,ans},{fld_no,0},{name,&amp;lt;&amp;lt;&amp;ldquo;Mti&amp;rdquo;&amp;gt;&amp;gt;},{val_binary_form,Mti}]),
    &lt;/p&gt;
    &lt;p&gt;
        %%this gives #{fld_no =&amp;gt; 0,ftype =&amp;gt; ans,name =&amp;gt; &amp;lt;&amp;lt;&amp;ldquo;Mti&amp;rdquo;&amp;gt;&amp;gt;,val_binary_form =&amp;gt; &amp;lt;&amp;lt;&amp;ldquo;1200&amp;rdquo;&amp;gt;&amp;gt;}&lt;br /&gt;
    &lt;/p&gt;
&lt;/blockquote&gt;&lt;/p&gt;

&lt;p&gt;the next step is to get the bitmap which is a hexadecimal(base 16
number)which starts from the fifth  digit and is either 8 or 16 in
size.
&lt;br&gt;
The bitmap tell us which data elements exist in the message.
the bitmap is either a &lt;strong&gt;primary bitmap&lt;/strong&gt; or a &lt;strong&gt;secondary bitmap&lt;/strong&gt;.
the first bit in a bitmap tell us whether the secondary bitmap exists.
the bitmap is either an 8 byte(primary) or 16 byte(secondary) hexadecimal which when converted to base 2 shows the presence or absence of fields from 1 to 128.
Each bit in a primary/secondary bitmap shows the presence/absence of a data element.
&lt;br&gt;
Each digit when converted into base 2 and left padded to a max of 4 digits with zero represents the presence or absence of 4 data elements.
For example the bitmap &lt;strong&gt;4210001102C04804&lt;/strong&gt; is &lt;strong&gt;0100001000010000000000000001000100000010110000000100100000000100&lt;/strong&gt; in base 2.
&lt;br&gt;
this means Fields 2, 7, 12, 28, 32, 39, 41, 42, 50, 53, 62 are present and there is no secondary bitmap since bit 1 is 0.
&lt;br&gt;
Find below code sections for getting the bitmap out of our message as
explained above from
&lt;blockquote&gt;
    &lt;p&gt;
        Fthdig = binary:part(Bin_message,4,1),%%this gives F
    &lt;/p&gt;
&lt;/blockquote&gt;
to&lt;br /&gt;
&lt;blockquote&gt;
    &lt;p&gt;
        Bitmap_transaction = &amp;lt;&amp;lt; &amp;lt;&amp;lt; (convert_base_pad(One,4,&amp;lt;&amp;lt;&amp;ldquo;0&amp;rdquo;&amp;gt;&amp;gt;)):4/binary &amp;gt;&amp;gt;  || &amp;lt;&lt;a href=&#34;One:1/binary&#34;&gt;One:1/binary&lt;/a&gt;&amp;gt; &amp;lt;= Bitmap_Segment &amp;gt;&amp;gt;,
        %%this gives &amp;lt;&amp;lt;&amp;ldquo;111100100011000000000100000000010&amp;hellip;&amp;rdquo;&amp;gt;&amp;gt;
    &lt;/p&gt;&lt;br /&gt;
&lt;/blockquote&gt;
the next three statements creates a map which contains the bitmap and
the mti .
&lt;br&gt;The next step is to get the data elements which is the actual
content of the message itself and contains info like&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;transaction amount&lt;/li&gt;
&lt;li&gt;currency&lt;/li&gt;
&lt;li&gt;transaction type&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;the start_index calculation tells us  to start processing the binary
string at a particular position.Since the primary bitmap is always sent
with every message and the secondary bitmap is optional we start the
processing from the point of the  secondary bitmap .
&lt;br&gt;
Of importance to note is the &lt;strong&gt;get_spec_field&lt;/strong&gt; function which contains
info about every data element.The function returns info such as&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;maximum field length&lt;/li&gt;
&lt;li&gt;field type&lt;/li&gt;
&lt;li&gt;whether field is fixed length or variable length&lt;/li&gt;
&lt;li&gt;header length if field has a header&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Variable length fields have a header which shows how long the field is
even though the field may have a maximum length .
&lt;br&gt;You could say this is the erlang representation of the iso93 asci
spec.This also makes it quite easy to modify the spec if some fields
change.&lt;/p&gt;

&lt;p&gt;the fold_bin function is a custom function which kind of works like a
list fold. In this case instead of a list it takes a binary,accepts a
fun for processing the binary and processes the binary until the
binary is of size zero .there is also an accumilator variable in there
just like with a list fold .
&lt;blockquote&gt;
    &lt;p&gt;
        fold_bin(_Fun, Accum, &amp;lt;&amp;lt;&amp;gt;&amp;gt;) -&amp;gt; Accum;
    &lt;/p&gt;&lt;p&gt;
        fold_bin(Fun, Accum, Bin) -&amp;gt;
    &lt;/p&gt;&lt;p&gt;
            {NewBin, NewAccum} = Fun(Bin, Accum),
    &lt;/p&gt;&lt;p&gt;
            fold_bin(Fun, NewAccum, NewBin).
    &lt;/p&gt;&lt;br /&gt;
&lt;/blockquote&gt;&lt;br /&gt;
The reason for this is because we will be passing the bitmap as the
input element with the iso message also being passed as an input but as an accumulator
in this case.The bitmap of course represents the presence or absence of a field .
&lt;br&gt;If a field is present then we extract the data element out
of the iso message because the iso message will be available on every
iteration and then move on.If the field is not present we move on to the
next element anyway .
&lt;br&gt;The fold_bin segment which gets the data elements and puts them in
a map works like this in its simplified form&lt;br /&gt;
&lt;blockquote&gt;
    &lt;p&gt;
        &lt;strong&gt;OutData=fold_bin(
        fun
        &lt;br&gt;(Bitmap,
        {Data_for_use_in,Index_start_in,Current_index_in,Map_out_list_in})
        when X =:= &amp;lt;&amp;lt;&amp;ldquo;1&amp;rdquo;&amp;gt;&amp;gt; -&amp;gt;&lt;/strong&gt;
    &lt;/p&gt;&lt;p&gt;
        in this case field exists
        &lt;br&gt;
        Data_for_use_in = Iso Message as input in fold_bin function
        &lt;br&gt;
        Index_start_in = Position we are in in iso message which
        corresponds to a specific start position for data element
        &lt;br&gt;
        Current_index_in = current data element
        &lt;br&gt;
        Map_out_list_in = accumulator for data elements
        &lt;br&gt;
        statement to extract data elements based on field
        length,maximum length etc follow..
    &lt;/p&gt;&lt;p&gt;
        &lt;strong&gt;{Rest_bin,{Data_for_use_in,New_Index,Fld_num_out,NewMap}};&lt;/strong&gt;
        &lt;br&gt;
        %%output which contains NewMap which contains the data element
        &lt;br&gt;
        Rest_bin =  bitmap which contains presence/absence of
        data elements yet to be processed
        &lt;br&gt;
        Data_for_use_in = Iso Message as input in fold_bin function
        &lt;br&gt;
        New_Index = Position we are in in iso message which
        corresponds to a specific start position for next data element
        &lt;br&gt;
        Fld_num_out = next data element&lt;br /&gt;
        &lt;br&gt;
        Also New_Index is the position of the next element so we know
        where in the binary to start processing the next date element and Fld_num_out
        is the fld_num which we will use for getting the spec for a
        field using the &lt;strong&gt;get_spec_field&lt;/strong&gt; function&lt;br /&gt;
    &lt;/p&gt;
    &lt;p&gt;
        &lt;strong&gt;(Bitmap,
        {Data_for_use_in,Index_start_in,Current_index_in,Map_out_list_in})
        when X =:= &amp;lt;&amp;lt;&amp;ldquo;0&amp;rdquo;&amp;gt;&amp;gt; -&amp;gt;&lt;/strong&gt;
    &lt;/p&gt;&lt;p&gt;
        in this case field does not exist
        &lt;br&gt;
        &amp;hellip;statement to extract data elements based on field
        length,maximum length etc..
    &lt;/p&gt;&lt;p&gt;
        &lt;strong&gt;{Rest_bin,{Data_for_use_in,New_Index,Fld_num_out,NewMap}};&lt;/strong&gt;
        &lt;br&gt;
    &lt;/p&gt;&lt;p&gt;
        &lt;strong&gt;end,
        {Bin_message,Start_index,1,Map_Data_Element},Bitmap_transaction),&lt;/strong&gt;
        &lt;br&gt;
        %%
        Bin_message = Iso Message
        &lt;br&gt;
        Start_index = is used to tell where to start processing the
        binary from ,
        &lt;br&gt;
        1  = this tells us we are starting from field 1
        &lt;br&gt;
        Map_Data_Element = the accumulator for the data elements
        where each data element is added this accumulator as a map
        with some metadata about the data element also added
    &lt;/p&gt;
&lt;/blockquote&gt;
   At each iteration as we are going through the iso message there is
   a calculation which is done to find out metadata about the data element .
   This metadata will give us the header length of the field or if
   even the field has a header .After we get the header  or not we
   then get to calculate the actual message and its starting and
   ending points .
   &lt;br&gt;
    After the data element is obtained it is put in the output map
    along with some metadata about the data element.
    &lt;br&gt;&lt;br /&gt;
    Please browse through the source code to better understand the
    code as well as how to get the various data elements if my explanation
    is not enough .
    &lt;br&gt;
    There is also a function on how to do the above with strings.
&lt;blockquote&gt;
    &lt;p&gt;
        process_message({list,Rest})-&amp;gt;&lt;br /&gt;
    &lt;/p&gt;
&lt;/blockquote&gt;&lt;br /&gt;
    As i said earlier binaries occupy less space and has more
    efficient functions for processing but you can browse through the
    code to get a better idea of processing the message but using
    string functions .
    &lt;br&gt;
    To test it out by sending sample iso messages open the erlang
    shell and compile the iso_process with &lt;strong&gt;c(iso_process)&lt;/strong&gt;.You can
    then send iso messages by first starting the server with
&lt;blockquote&gt;
    &lt;p&gt; iso_process:start_iso_server().&lt;/p&gt;
&lt;/blockquote&gt;&lt;br /&gt;
afterwhich you can send iso messages with
&lt;blockquote&gt;
    &lt;p&gt; iso_process:send(&amp;ldquo;01581200F230040102B00000000000000400000010&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
    &lt;p&gt;
    &amp;ldquo;48468112122012340000100000001107221800000001161204171926FA&amp;rdquo;
    &lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
    &lt;p&gt;
    &amp;ldquo;BCDE123ABD06414243000termid1210Community106A5DFGR1112341234234&amp;rdquo;).
    &lt;/p&gt;
&lt;/blockquote&gt;
Note that the iso message must be preceded by length of the message
so in this case &lt;strong&gt;0158&lt;/strong&gt; was the length of the message and was added to
the message when the message was being sent.
&lt;br&gt;&lt;/p&gt;

&lt;p&gt;Alternatively there is a java file &lt;em&gt;Test_java_client.java&lt;/em&gt; which you can
use to edit and send messages to the iso server example.
&lt;br&gt;
After editing the various iso fields in the file you can then compile
the file using
 &lt;blockquote&gt;
    &lt;p&gt;
    javac -cp .:jpos-2.0.7-SNAPSHOT.jar Test_java_client.java
    &lt;/p&gt;
&lt;/blockquote&gt;
and send the message to the erlang iso server which should have been
started using
 &lt;blockquote&gt;
    &lt;p&gt;
    java -Xbootclasspath/p:jpos-2.0.7-SNAPSHOT.jar Test_java_client 8002
    &lt;/p&gt;
&lt;/blockquote&gt;
This is where i wind down.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Parsing iso8583 messages Part 1</title>
      <link>https://nayibor.github.io/post/73e0ec2ac943bfecb47acbe2e603f814/</link>
      <pubDate>Mon, 12 Dec 2016 07:57:26 +0000</pubDate>
      
      <guid>https://nayibor.github.io/post/73e0ec2ac943bfecb47acbe2e603f814/</guid>
      <description>&lt;p&gt;Today we are going to talk about creating a tcp server to &amp;nbsp;parse iso messages using erlang . This tutorial explains the very basic of creating tcp servers in erlang . there are better specialized &amp;nbsp;libraries out there (&lt;a href=&#34;https://github.com/ninenines/ranch&#34;&gt;ranch&lt;/a&gt;) for creating tcp servers and pools of them but this is very basic and we need just a simple tcp server to show how to process incoming iso messages .&amp;nbsp;&lt;br&gt;&lt;/p&gt;&lt;p&gt;We will be using the 1993 iso8583 ascii protocol format .&lt;br&gt;I covered this in a previous post(&lt;a href=&#34;https://nayibor.github.io/post/ddf349de5c9c5cf29af2e17bc71724b8/&#34;&gt;here&lt;/a&gt;) so you can go there to get a basic summary of iso8583 . knowledge of this protocol and also erlang would help &amp;nbsp;.&lt;/p&gt;&lt;p&gt;to install erlang go &lt;a href=&#34;http://www.erlang.org/downloads&#34;&gt;here&lt;/a&gt;&amp;nbsp;.&amp;nbsp;&lt;/p&gt;&lt;p&gt;the files for the example is contained in this git &amp;nbsp;&lt;a href=&#34;https://github.com/nayibor/iso_process_tut_repo&#34;&gt;&lt;i&gt;repository&lt;/i&gt;&lt;/a&gt; &amp;nbsp;.&amp;nbsp;&lt;/p&gt;&lt;p&gt;Lets hit the road !!&lt;br&gt;&lt;/p&gt;&lt;h2&gt;Creating a basic tcp server in erlang&lt;/h2&gt;&lt;p&gt;lets look at the iso_process.erl file and the portions where the tcp server is created .&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;%% @doc this part is for starting the iso server &lt;br&gt;-spec start_iso_server()-&amp;gt;[pid()] | {error,term()}. &lt;br&gt;start_iso_server()-&amp;gt; ....&lt;br&gt;&lt;/p&gt;&lt;p&gt;%% @doc this part is for listener socket&lt;br&gt;-spec loop_listen(port())-&amp;gt;[port()] | {error,term()} | fun(). &lt;br&gt;loop_listen(Listen_socket)-&amp;gt;....&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;the start_iso_server function and the loop_listen function are responsible for creating the tcp server and erlang processes for handling client connection .&lt;/p&gt;&lt;p&gt;the {ok,Listen} = gen_tcp:listen(...) in &lt;b&gt;start_iso_server&lt;/b&gt; function creates the tcp listener socket and sets up pattern matching so if the listener socket &amp;nbsp;is created successfully the code goes on succesfully else it stops if there is an error(eg.. if port is being used by another program) .&amp;nbsp;&lt;/p&gt;&lt;p&gt;note that because the messages will be coming as strings and also because we want to process only one message at a time we use &lt;b&gt;[list, {packet, 0},{active, once}]&lt;/b&gt; options .strings are represented as lists in erlang so list is in there . the {packet,0} option also tells us to allow messages to flow without breaking it up .&lt;/p&gt;&lt;p&gt;&amp;nbsp;the&lt;b&gt; loop_listen&lt;/b&gt; function&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;%% @doc this part is for listener socket&lt;br&gt;-spec loop_listen(port())-&amp;gt;[port()] | {error,term()} | fun(). &lt;br&gt;loop_listen(Listen_socket)-&amp;gt;...&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&amp;nbsp;is &amp;nbsp;what waits for connections from clients and independently deal with each client connection while the loop_receive is what is responsible for sending/receiving data from clients .&lt;br&gt;&lt;/p&gt;&lt;p&gt;the &lt;b&gt;loop_receive &lt;/b&gt;function&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;%% @doc this part is for the acceptor socket &lt;br&gt;-spec loop_receive(port(),[])-&amp;gt;[pos_integer()] | {error,term()} | fun().        &lt;br&gt;loop_receive(Socket,Isom)-&amp;gt;...&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&amp;nbsp;is the function which receives communicates with clients . i.e. sends and receives data in this case iso messages from clients .&lt;/p&gt;&lt;p&gt;for every iso string(string = header+iso message) sent &amp;nbsp; a check is first done to get the header which contains the size of the iso message messsage itself . the size of the message in the header is then used to calculate &amp;nbsp;how many more bits needs to be streamed to get the whole message in . the iso string is streamed until the whole message is obtained after which it is processed with this function&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;                               Response_message = process_message(Rest),&lt;br&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;TO run the program do a git clone of the &lt;a href=&#34;https://github.com/nayibor/iso_process_tut_repo&#34;&gt;repo&lt;/a&gt;&amp;nbsp;.&lt;/p&gt;&lt;p&gt;cd to the&amp;nbsp;iso_process_tut_repo folder .&lt;/p&gt;&lt;p&gt;after that log into the erlang shell(erl or werl in windows) and run c(iso_process).&lt;/p&gt;&lt;p&gt;this compiles iso_process.erl module .&lt;/p&gt;&lt;p&gt;&amp;nbsp;then run iso_process.start_iso_server() whch starts the tcp server .&lt;/p&gt;&lt;p&gt;to send messages to server run iso_process:send_message(Message) .&lt;/p&gt;&lt;p&gt;eg .&amp;nbsp;&lt;/p&gt;&lt;p&gt;iso_process:send_message(”&lt;/p&gt;&lt;p&gt;012912007230040102B000001012312313122&lt;/p&gt;&lt;p&gt;0123400001000000011072218000000011612&lt;/p&gt;&lt;p&gt;12081731FABCDE123ABD06414243000termi&lt;/p&gt;&lt;p&gt;d1210Community106A5DFGR”).&lt;/p&gt;&lt;p&gt;you should see a print out of the isomessage showing the various fields .&lt;/p&gt;&lt;p&gt;we will go into how the message is processed and the mti,bitmap,data elements are obtained from the message in the next post as well as how to use jpos to send the messages so we learn a little about both jpos and message processing . neat huh . see u later for that !!!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Iso8583  message structure</title>
      <link>https://nayibor.github.io/post/ddf349de5c9c5cf29af2e17bc71724b8/</link>
      <pubDate>Mon, 05 Dec 2016 07:55:57 +0000</pubDate>
      
      <guid>https://nayibor.github.io/post/ddf349de5c9c5cf29af2e17bc71724b8/</guid>
      <description>&lt;p&gt;alloha.&lt;br&gt;at last i have been able to get my lazy behind to write a blog post on this .&lt;/p&gt;&lt;p&gt;About time :) .&lt;br&gt;This will be the first in a series about parsing iso8583 financial messages &amp;nbsp;using erlang .&lt;br&gt;we will get to know &lt;br&gt;about iso8583 and the message structure,&lt;br&gt;receiving iso 8583 messages over the wire using erlang tcp server and parsing the message .&amp;nbsp;&lt;br&gt;parsing those messages in various formats(text(acii),binary,custom format).&lt;/p&gt;&lt;p&gt;Here we go .&lt;/p&gt;&lt;h2&gt;First off what is iso8583 ?&lt;/h2&gt;&lt;p&gt;Simply put it is a protocol which specificies the content of financial transaction done with payment cards in the form of request/response messages as well as info on how to process the financial transaction.&lt;/p&gt;&lt;p&gt;more general info can be found on the wikipedia page about it &lt;a href=&#34;https://en.wikipedia.org/wiki/ISO_8583&#34;&gt;here&lt;/a&gt; .&lt;/p&gt;&lt;h2&gt;What are the components of an iso &amp;nbsp;message ?&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;optional header . optional zero padded header showing size of message.header size is known in advance by receipient and is specified by sender .Usually contains size of message ony but may contain size of header + size of message . An &amp;nbsp;example of a header is 0158 which means the content of the message(mti+bitmap+data elements) is 158 bytes&amp;nbsp;&lt;/li&gt;&lt;li&gt;mti(message type indicator). A 4 digit &amp;nbsp;number showing info about the message . each digit shows some info about the message . &lt;br&gt;example of an mti is 1200 meaning with the meaning below .&lt;br&gt;1 - first digit is message version - 1 message class means 1993 version &lt;br&gt;2 - second digit specifies the message class(purpose of message) &amp;nbsp;eg. authorization,reversal.etc.. 2 means financial message&lt;br&gt;0 - third digit specifies message function(how the message should flow within system) -eg. requests,advices,etc.. &amp;nbsp;0 means request&lt;br&gt;0 - fourth digit specifies message origin (where is the message coming from ) eg. from acquirer,issue etc.. 0 means acquirer&lt;/li&gt;&lt;li&gt;bitmap(primary or secondary).A 16/32 hexadecimal number showing the presence or absence of data elements . a bitmap can be a primary or a secondary bitmap . &lt;br&gt;primary means presence of &amp;nbsp;fields from 1-64 .&lt;br&gt;secondary means the presence of presence of fields greater than 64 means 64-128 .&lt;br&gt;the bitmap has to be converted from hex form to binary form where each binary digit represent presence or absence of a data element .if &amp;nbsp;if the first digit of the bitmap in binary form is 1 it means bitmap has fields greater than 64 which makes it a secondary bitmap .&lt;br&gt;An example of a bitmap is F230040102B000000000000004000000 meaning fields 1,2,3,4,7,11,12,22,32,39,41,43,44,102 are present and bitmap is a secondary bitmap due to fields greater than 64 being present .&lt;br&gt;&lt;/li&gt;&lt;li&gt;data elements . These are the &amp;nbsp;actual contents of &amp;nbsp;the financial message such as the amount of the transaction,currecy,transaction type(balance enquiry,withdrawal,etc..),card number . &lt;br&gt;there are 128 data elements from 1-128 .&amp;nbsp;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;What variants of iso messages are available?&lt;/h2&gt;&lt;p&gt;There are a few differnt variants of the iso8583 messaging format but &amp;nbsp;the most common ones are (1987 format/1993 format /2003 format ).&lt;br&gt;the specification of &amp;nbsp;the various variants specify &amp;nbsp;the position of the various data elements &amp;nbsp;as well as what format the message will be transmitted in .&lt;br&gt;proprietery/custom ones also exist based on the above ones which may be cusom format agreed to be used between two parties or internal format for one party. &amp;nbsp;&lt;br&gt;&lt;/p&gt;&lt;h2&gt;How are messages processed ?&lt;/h2&gt;&lt;p&gt;Financial messages consist of request/response messages are sent between two entities to process financial transactions &amp;nbsp; .&lt;br&gt;a tcp connection or other connection type(UDP, X.25, SDLC, SNA,ASYNC, QTP, SSL, HTTP,custom) is opened between the two entities . &lt;br&gt;Some handshake mechanism may be done to prepare both parties for sending messages &amp;nbsp; .&lt;br&gt;Messages are sent consisting of a request/response message .&lt;br&gt;Depending on connection type a persistant connection may be kept open or a connection may be closed and reopened later for subsequent messages to be sent and received.&lt;/p&gt;&lt;h2&gt;What to keep in mind when processing messages ? &lt;/h2&gt;&lt;ul&gt;&lt;li&gt;Message format (ascii,binary,custom format).eg 1993 acii,1993 binary.in what format the message will be transmitted in as well as rules to encode/decode the message .&amp;nbsp;&lt;br&gt;&lt;/li&gt;&lt;li&gt;Wire protocol (TCP/IP,UDP, X.25, SDLC, SNA,ASYNC, QTP, SSL, HTTP,custom protocol )how a message is transmitted over the wire.&lt;br&gt;&lt;/li&gt;&lt;li&gt;Message flow (e.g., send request for authorization, wait for response, retransmit, reversal).Various states the message may be in .&amp;nbsp;&lt;br&gt;&lt;/li&gt;&lt;li&gt;Optional beginning and ending headers &amp;nbsp;showing size of message and/or headers themeselves .&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Enough talking . An example please ???&lt;/h2&gt;&lt;p&gt;The assumption is that we are using iso 1992 iso8583 ascii specification for specifying message rules for encoding decoding messages .the specification will also show the data type of a field(number,string,hex,etc..),where it is variable length or not or whether it has an optional padding or not . &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;br&gt;We will deconstruct the iso message below &amp;nbsp;as an example and show the optional header,mti,bitmap,data elements in the message . &lt;br&gt;the optional header will be assumed to be 4 bytes long excluding the size of the header itself.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;Consider the iso message below&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;01581200F230040102B000000000000004000000&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;1048468112122012340000100000001107221800&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;000001161204171926FABCDE123ABD06414243&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;000termid1210Community106A5DFGR1112341234234&lt;/b&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;this is &amp;nbsp;breakdown of the message below from left to right&lt;/p&gt;&lt;ul&gt;&lt;li&gt;0158 -&amp;gt; header length(4 byte or digit header). this show the length of the message is 158 digits excluding the header&lt;br&gt;&lt;/li&gt;&lt;li&gt;1200 -&amp;gt; mti&lt;br&gt;&lt;/li&gt;&lt;li&gt;F230040102B000000000000004000000 -&amp;gt; fld 1 bitmap(secondary in this case cuz F converted into 4 digit binary number is 1111 meaning bitmap contains secondary &amp;nbsp;)&lt;br&gt;&lt;/li&gt;&lt;li&gt;104846811212 -&amp;gt; fld 2 primary account number(prefix header showing length of fld 2 is is 10 digits)&lt;br&gt;&lt;/li&gt;&lt;li&gt;201234 -&amp;gt; fld3 processing code&amp;nbsp;&lt;br&gt;&lt;/li&gt;&lt;li&gt;000010000000 -&amp;gt; fld 4 transaction amount&amp;nbsp;&lt;br&gt;&lt;/li&gt;&lt;li&gt;1107221800 -&amp;gt; fld 7 Transmission date &amp;amp; time&lt;br&gt;&lt;/li&gt;&lt;li&gt;000001 -&amp;gt; fld 11 rrn&lt;br&gt;&lt;/li&gt;&lt;li&gt;161204171926 -&amp;gt; fld 12 time local transaction&lt;br&gt;&lt;/li&gt;&lt;li&gt;FABCDE123ABD -&amp;gt; fld 22 pos data code&amp;nbsp;&lt;br&gt;&lt;/li&gt;&lt;li&gt;06414243 -&amp;gt; fld 32 Acquiring institution identification code(prefix header showing length of fld32 is 6 digits)&amp;nbsp;&lt;br&gt;&lt;/li&gt;&lt;li&gt;000 &amp;nbsp;-&amp;gt; fld 39 response code&amp;nbsp;&lt;br&gt;&lt;/li&gt;&lt;li&gt;termid12 -&amp;gt; &amp;nbsp;fld 41 terminal id&amp;nbsp;&lt;br&gt;&lt;/li&gt;&lt;li&gt;10Community1 -&amp;gt; &amp;nbsp;fld 43 location data(prefix header showing length of fld43 is 10 digits)&lt;br&gt;&lt;/li&gt;&lt;li&gt;06A5DFGR -&amp;gt; fld 44 additional response code (prefix header showing length of fld32 is 6 digits)&amp;nbsp;&lt;br&gt;&lt;/li&gt;&lt;li&gt;1112341234234 -&amp;gt; fld 102 account number&lt;br&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;this is a short summary of the basics of iso .&lt;/p&gt;&lt;p&gt;more info can be on the wikipedia page if you want to delve more deeply into it .&lt;/p&gt;&lt;p&gt;next post will be about using erlang to extract the various component (mti,bitmap,data elements) out of a message using a spec .&amp;nbsp;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>