<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>erlang binary processing on Nuku&#39;s blog</title>
    <link>https://nayibor.github.io/tags/erlang-binary-processing/</link>
    <description>Recent content in erlang binary processing on Nuku&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 01 Jun 2020 00:54:24 +0200</lastBuildDate>
    
	<atom:link href="https://nayibor.github.io/tags/erlang-binary-processing/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Library for parsing iso8583 messages in erlang</title>
      <link>https://nayibor.github.io/post/c33083b29ef6e62daebc9459653f84b9/</link>
      <pubDate>Mon, 01 Jun 2020 00:54:24 +0200</pubDate>
      
      <guid>https://nayibor.github.io/post/c33083b29ef6e62daebc9459653f84b9/</guid>
      <description>i have been working on an iso8583 parsing library. its written in erlang but can be used in erlang,elixir,lfe,etc.. basically all beam languages. this library can be used for packing and unpacking iso8583 financial messages. It accepts a specification file which contains info about fields,mti,bitmap for your messages. The specification has info such as header length for various fields,padding info for fields,etc&amp;hellip; This specification information is then used for packing/unpacking iso8583 formatted messages.</description>
    </item>
    
    <item>
      <title>Parsing iso8583 messages Part 2</title>
      <link>https://nayibor.github.io/post/4948d52595d68beab6dd3a919db6d115/</link>
      <pubDate>Thu, 22 Dec 2016 10:54:24 +0200</pubDate>
      
      <guid>https://nayibor.github.io/post/4948d52595d68beab6dd3a919db6d115/</guid>
      <description>Today we will be showing how to extract the various components out of an iso string. The combination of a tcp server as well as code to extract the iso message components and send it for further processing is what is popularly called an interface server in payment processing . Specifically the components we are interested in are
the next step is to get the bitmap which is a hexadecimal(base 16 number)which starts from the fifth digit and is either 8 or 16 in size.</description>
    </item>
    
  </channel>
</rss>