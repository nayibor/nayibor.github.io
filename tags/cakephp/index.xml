<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cakephp on Nuku&#39;s blog</title>
    <link>https://nayibor.github.io/tags/cakephp/index.xml</link>
    <description>Recent content in Cakephp on Nuku&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="https://nayibor.github.io/tags/cakephp/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Pagination using backbone.js and underscore template</title>
      <link>https://nayibor.github.io/post/f60a18aff854a9e6a287de1898f22a62/</link>
      <pubDate>Sun, 03 Jul 2016 02:41:08 +0000</pubDate>
      
      <guid>https://nayibor.github.io/post/f60a18aff854a9e6a287de1898f22a62/</guid>
      <description>&lt;p&gt;this post will talk about how to create a pagination area for pagination using backbone.js and underscore templates.&lt;/p&gt;&lt;p&gt;you will need to have the pagination object available on the client side in the following form before its passed to the model object.this could have been request as &amp;nbsp;part of a collection request &amp;nbsp;which had been done to get fresh data about a collection . subfields can be created for the pagination parts .&lt;/p&gt;&lt;p&gt;//sample pagintation info &amp;nbsp;returned from controller function will be passed as an &amp;nbsp; &amp;nbsp; arguement when the view is being created for the PaginateView&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;//cakephp controller example below&amp;nbsp;&lt;/b&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;class ProductController extends AppController {&lt;br&gt;public $name = &#39;Product&#39;;&lt;/p&gt;&lt;p&gt;public function products(){&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;$products = $this-&amp;gt;paginate(&#39;Product&#39;); &amp;nbsp;&lt;br&gt;$paginate_data=array();&lt;br&gt;$paginate_data[&#39;page&#39;]=$this-&amp;gt;request-&amp;gt;params[&#39;paging&#39;][&#39;Product&#39;][&#39;page&#39;];&lt;br&gt;$paginate_data[&#39;pageCount&#39;]=$this-&amp;gt;request-&amp;gt;params[&#39;paging&#39;][&#39;Product&#39;][&#39;pageCount&#39;];&lt;br&gt;$paginate_data[&#39;prevPage&#39;]=$this-&amp;gt;request-&amp;gt;params[&#39;paging&#39;][&#39;Product&#39;][&#39;prevPage&#39;];&lt;br&gt;$paginate_data[&#39;nextPage&#39;]=$this-&amp;gt;request-&amp;gt;params[&#39;paging&#39;][&#39;Product&#39;][&#39;nextPage&#39;];&lt;br&gt;//for putting the product info retrieved int a form which can be used for the backbone collection &lt;br&gt;//on the front end        &lt;br&gt;$response_array=array();&lt;br&gt;foreach($products as $val){         &lt;br&gt;response_array[]=$val[&#39;Product&#39;];&lt;br&gt;};&lt;br&gt;echo json_encode(array(&#34;pagination&#34;=&amp;gt;$paginate_data,&#34;products&#34;=&amp;gt;$response_array));&lt;br&gt;exit();&lt;/p&gt;&lt;p&gt;}}&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;b&gt;//sample pagination model with default setup&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&amp;nbsp;var PageModel = Backbone.Model.extend({&amp;nbsp;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;   defaults: {&lt;br&gt;query :’null,&lt;br&gt;    pagination : null,&lt;br&gt;  url:”http://localhost/Product/products/”&lt;br&gt;}&amp;nbsp;});&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;b&gt;//sample view for pagination item&lt;br&gt;&lt;/b&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;var PaginateView= Backbone.View.extend({&lt;br&gt;   tagname:&#39;div&#39;,&lt;br&gt;  id:&#39;page_div&#39;,&lt;br&gt;  model:PageModel,&lt;br&gt;    template: _.template($(&#39;#paginate_tmpl&#39;).html()),&lt;br&gt;   render:function(){              &lt;br&gt;    var pass_data={&lt;br&gt;     query:this.model.get(&#39;query&#39;),&lt;br&gt;  url:this.model.get(&#39;url&#39;),&lt;br&gt;  paginate:this.model.get(&#39;pagination&#39;)&lt;br&gt;   };&lt;br&gt; &amp;nbsp; &amp;nbsp; var html = this.template(pass_data);&lt;br&gt; &amp;nbsp; &amp;nbsp; this.$el.html(html);&lt;br&gt; &amp;nbsp; &amp;nbsp; return this;&lt;br&gt;     }&lt;br&gt;   });&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;b&gt;//sample creation of a pagination view with data returned from server as arguement&lt;/b&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;var pagination_data={&lt;br&gt;page:2,&lt;br&gt;pageCount:10,&lt;br&gt;prevPage:1,&lt;br&gt;nextPage:3&lt;br&gt;};&lt;br&gt;var query_data=&#34;a=1&amp;amp;b=2&amp;amp;c=3&#34;;&lt;br&gt;var url_data=$(&#34;#product_list_url&#34;).val();&lt;br&gt;var page = new PaginateView({model:new PageModel({query:query_data,url:url_data,pagination:pagination_data})});&lt;/p&gt;&lt;p&gt;&lt;b&gt;//lastly pagination underscore template&lt;/b&gt;&lt;br&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;this example works &amp;nbsp;for (first,previous,next,last)pagination type and cycling inbtween them&lt;br&gt;paginate template does some calculations using the page,pageCount,prevPage,nextPage to determine current page &lt;br&gt;and show it and hide links for the others&amp;nbsp;&lt;br&gt;you will have to use your own css here to style links&lt;/p&gt;&lt;p&gt;&amp;lt;!--&lt;/p&gt;&lt;p&gt;this template is a template for pagination &lt;br&gt;combination of underscore tempate&lt;br&gt;--&amp;gt;&lt;/p&gt;&lt;p&gt;&amp;lt;script type=&#34;text/template&#34; id=&#34;paginate_tmpl&#34;&amp;gt;&lt;/p&gt;&lt;p&gt;&amp;lt;%&lt;br&gt;//for first page of &amp;nbsp;multiple page&amp;nbsp;resultset&lt;br&gt;if(paginate.page!=paginate.pageCount &amp;amp;&amp;amp; paginate.page==1 &amp;amp;&amp;amp; !paginate.prevPage &amp;amp;&amp;amp; paginate.nextPage) &amp;nbsp;{ &amp;nbsp; &amp;nbsp;&lt;br&gt;%&amp;gt;&lt;/p&gt;&lt;p&gt;&amp;lt;span class=&#34;pglink&#34;&amp;gt;&amp;lt;&amp;lt; previous &amp;lt;/span&amp;gt;&lt;br&gt;&amp;lt;span class=&#34;pglink&#34;&amp;gt;&amp;lt;a href=&#34;&amp;lt;%= url+&#34;?page=&#34;+(paginate.page+1)+&#34;&amp;amp;&#34;+query %&amp;gt;&#34;&amp;gt;next &amp;gt;&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/span&amp;gt;&lt;br&gt;&amp;lt;span class=&#34;pglink&#34;&amp;gt;&amp;lt;a href=&#34;&amp;lt;%= url+&#34;?page=&#34;+(paginate.pageCount)+&#34;&amp;amp;&#34;+query %&amp;gt;&#34; rel=&#34;last&#34;&amp;gt;last &amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/span&amp;gt;&lt;/p&gt;&lt;p&gt;&amp;lt;%&lt;br&gt;//for pages &amp;gt; current page but less than pageCount&lt;br&gt;}else if(paginate.page &amp;gt; 1 &amp;amp;&amp;amp; paginate.page &amp;lt; paginate.pageCount){ &amp;nbsp; &lt;br&gt;%&amp;gt;&lt;/p&gt;&lt;p&gt;&amp;lt;span class=&#34;pglink&#34;&amp;gt;&amp;lt;a href=&#34;&amp;lt;%= url+&#34;?page=1&#34;+&#34;&amp;amp;&#34;+query %&amp;gt;&#34;&amp;gt;&amp;lt; first&amp;lt;/a&amp;gt;&amp;lt;/span&amp;gt;&lt;br&gt;&amp;lt;span class=&#34;pglink&#34;&amp;gt;&amp;lt;a href=&#34;&amp;lt;%= url+&#34;?page=&#34;+(paginate.page-1)+&#34;&amp;amp;&#34;+query %&amp;gt;&#34; rel=&#34;previous&#34;&amp;gt;&amp;lt;&amp;lt; previous&amp;lt;/a&amp;gt;&amp;lt;/span&amp;gt;&lt;br&gt;&amp;lt;span class=&#34;pglink&#34;&amp;gt;&amp;lt;a href=&#34;&amp;lt;%= url+&#34;?page=&#34;+(paginate.page+1)+&#34;&amp;amp;&#34;+query %&amp;gt;&#34; rel=&#34;next&#34;&amp;gt;next &amp;gt;&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/span&amp;gt;&lt;br&gt;&amp;lt;span class=&#34;pglink&#34;&amp;gt;&amp;lt;a href=&#34;&amp;lt;%= url+&#34;?page=&#34;+paginate.pageCount+&#34;&amp;amp;&#34;+query %&amp;gt;&#34; rel=&#34;last&#34;&amp;gt;last &amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/span&amp;gt;&lt;/p&gt;&lt;p&gt;&amp;lt;%&lt;br&gt;//for a single page resultset&lt;br&gt;}else if(paginate.page==paginate.pageCount &amp;amp;&amp;amp; !paginate.nextPage &amp;amp;&amp;amp; !paginate.prevPage){ &amp;nbsp; &amp;nbsp;&lt;br&gt;%&amp;gt;&lt;br&gt;&amp;lt;span class=&#34;pglink&#34;&amp;gt;&amp;lt;&amp;lt; previous&amp;lt;/span&amp;gt; &amp;nbsp;&lt;br&gt;&amp;lt;span class=&#34;pglink&#34;&amp;gt;next &amp;gt;&amp;gt;&amp;lt;/span&amp;gt; &amp;nbsp;&lt;/p&gt;&lt;p&gt;&amp;lt;% &lt;br&gt;//for last page of multi page resultset&amp;nbsp;&lt;br&gt;}else if(paginate.page==paginate.pageCount &amp;amp;&amp;amp; !paginate.nextPage &amp;amp;&amp;amp; paginate.prevPage){ &amp;nbsp; &lt;br&gt;%&amp;gt;&lt;/p&gt;&lt;p&gt;&amp;lt;span class=&#34;pglink&#34;&amp;gt;&amp;lt;a href=&#34;&amp;lt;%= url+&#34;?&#34;+query %&amp;gt;&#34;&amp;gt;&amp;lt; first&amp;lt;/a&amp;gt;&amp;lt;/span&amp;gt;&lt;br&gt;&amp;lt;span class=&#34;pglink&#34;&amp;gt;&amp;lt;a href=&#34;&amp;lt;%= url+&#34;?page=&#34;+(paginate.page-1)+&#34;&amp;amp;&#34;+query %&amp;gt;&#34;&amp;gt;&amp;lt;&amp;lt; previous&amp;lt;/a&amp;gt;&amp;lt;/span&amp;gt;&lt;br&gt;&amp;lt;span class=&#34;pglink&#34;&amp;gt;next &amp;gt;&amp;lt;/span&amp;gt; &amp;nbsp;&lt;br&gt;&amp;lt;% &amp;nbsp; &lt;br&gt;}                     &amp;nbsp; &lt;br&gt;%&amp;gt;&lt;br&gt;&amp;lt;/script&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;you can play around with the template and also the data returned from your controller to change the data returned to create more complex templates with more jump links .&lt;/p&gt;&lt;p&gt;this was just a starting point to show a sample underscore,backbone pagination template .&lt;/p&gt;&lt;p&gt;code &amp;nbsp;for tutorial can be found at this &lt;a href=&#34;https://bitbucket.org/nayibor/cake_backbone_pagination&#34;&gt;repo&lt;/a&gt;&amp;nbsp;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Cakephp 2.6.7  rawQuery bug</title>
      <link>https://nayibor.github.io/post/a0a580a0696d4382cab7314f832df7c3/</link>
      <pubDate>Tue, 11 Aug 2015 13:42:38 +0000</pubDate>
      
      <guid>https://nayibor.github.io/post/a0a580a0696d4382cab7314f832df7c3/</guid>
      <description>&lt;p&gt;Small observation i had with cakephp 2.6.7 .&lt;/p&gt;&lt;p&gt;I was trying to write a query with &lt;a href=&#34;http://cakephp.org/&#34;&gt;cakephp&lt;/a&gt; and&amp;nbsp; noticed that the query was not &lt;br&gt;&lt;/p&gt;&lt;p&gt;being sent to the server for processing .&lt;/p&gt;&lt;p&gt;I was using the rawQuery method and not the orm&amp;nbsp; methods like find etc...&lt;br&gt;&lt;/p&gt;&lt;p&gt;Query is &lt;br&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt; $query=&#34; SELECT id,stock_available FROM products WHERE &amp;nbsp;(id = ? and stock_available &amp;gt;= ?)or &amp;nbsp; (id &amp;nbsp;= ? and stock_available &amp;gt;= ?) FOR UPDATE&#34;;&lt;br&gt; $query_params=array(1,50,2,30);&lt;br&gt; $response = $this-&amp;gt;Product-&amp;gt;getDataSource()-&amp;gt;rawQuery($query,$query_params);&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;It was because the&amp;nbsp; &lt;a href=&#34;https://github.com/cakephp/cakephp/blob/2.7/lib/Cake/Model/Datasource/DboSource.php#L397-L436&#34;&gt;rawQuery&lt;/a&gt; method&amp;nbsp; was missing an extra option which was &lt;br&gt;&lt;/p&gt;&lt;p&gt;preventing the query from being run&amp;nbsp; due&amp;nbsp; to&amp;nbsp; confusion in this section &lt;br&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;

 &amp;nbsp; &amp;nbsp; &amp;nbsp;       return $this-&amp;gt;execute($sql, $params); &amp;nbsp; &amp;nbsp;

 &amp;nbsp; &amp;nbsp;

 &amp;nbsp; &amp;nbsp;
 &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp; &lt;br&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;This was accepting two parameters instead of three and due to this was &lt;br&gt;&lt;/p&gt;&lt;p&gt;mistaking the $params value for the options value thus query was not run .&lt;br&gt;&lt;/p&gt;&lt;p&gt;query was being run as &lt;br&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;public function rawQuery($sql, $params = array()) {

 &amp;nbsp; &amp;nbsp;




 &amp;nbsp; &amp;nbsp;

 &amp;nbsp; &amp;nbsp;

 &amp;nbsp; &amp;nbsp;
 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;br&gt;

 &amp;nbsp; &amp;nbsp; &amp;nbsp;       $this-&amp;gt;took = $this-&amp;gt;numRows = false;

 &amp;nbsp; &amp;nbsp;

 &amp;nbsp; &amp;nbsp;

 &amp;nbsp; &amp;nbsp;
 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 

 &amp;nbsp; &amp;nbsp;

 &amp;nbsp; &amp;nbsp;
 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;br&gt;&lt;b&gt;

 &amp;nbsp; &amp;nbsp; &amp;nbsp;       return $this-&amp;gt;execute($sql, $params); &amp;nbsp; &amp;nbsp;

 &amp;nbsp; &amp;nbsp;

 &amp;nbsp; &amp;nbsp;
 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/b&gt;&lt;br&gt;

 &amp;nbsp; &amp;nbsp; &amp;nbsp;   }&lt;br&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Instead of &lt;br&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;public function rawQuery($sql, $params = array()) {

 &amp;nbsp; &amp;nbsp;




 &amp;nbsp; &amp;nbsp;

 &amp;nbsp; &amp;nbsp;

 &amp;nbsp; &amp;nbsp;
 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;br&gt;

 &amp;nbsp; &amp;nbsp; &amp;nbsp;       $this-&amp;gt;took = $this-&amp;gt;numRows = false;

 &amp;nbsp; &amp;nbsp;

 &amp;nbsp; &amp;nbsp;

 &amp;nbsp; &amp;nbsp;
 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;

 &amp;nbsp; &amp;nbsp;

 &amp;nbsp; &amp;nbsp;
 &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp; &lt;br&gt;&lt;b&gt;

 &amp;nbsp; &amp;nbsp; &amp;nbsp;       return $this-&amp;gt;execute($sql, array(), $params); &amp;nbsp; &amp;nbsp;

 &amp;nbsp; &amp;nbsp;

 &amp;nbsp; &amp;nbsp;
 &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp; &lt;/b&gt;&lt;br&gt;

 &amp;nbsp; &amp;nbsp; &amp;nbsp;   }&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;It has subsequently been fixed .&lt;/p&gt;&lt;p&gt;Issue is at this &lt;a href=&#34;https://github.com/cakephp/cakephp/issues/6992/&#34;&gt;link&lt;/a&gt; . &lt;br&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>