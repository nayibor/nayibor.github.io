<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Code Musings</title>
    <link>https://nayibor.github.io/index.xml</link>
    <description>Recent content on Code Musings</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 12 Dec 2016 07:57:26 +0000</lastBuildDate>
    <atom:link href="https://nayibor.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Creating basic tcp server for iso messaging processing .</title>
      <link>https://nayibor.github.io/post/creating-basic-tcp-server-for-iso-messaging-processing-/</link>
      <pubDate>Mon, 12 Dec 2016 07:57:26 +0000</pubDate>
      
      <guid>https://nayibor.github.io/post/creating-basic-tcp-server-for-iso-messaging-processing-/</guid>
      <description>&lt;p&gt;Today we are going to talk about creating a tcp server to &amp;nbsp;parse iso messages using erlang . This tutorial explains the very basic of creating tcp servers in erlang . there are better specialized &amp;nbsp;libraries out there (&lt;a href=&#34;https://github.com/ninenines/ranch&#34;&gt;ranch&lt;/a&gt;) for creating tcp servers and pools of them but this is very basic and we need just a simple tcp server to show how to process incoming iso messages .&amp;nbsp;&lt;br&gt;&lt;/p&gt;&lt;p&gt;We will be using the 1993 iso8583 ascii protocol format .&lt;br&gt;I covered this in a previous post(&lt;a href=&#34;https://nayibor.github.io/post/iso8583-message-structure/&#34;&gt;here&lt;/a&gt;) so you can go there to get a basic summary of iso8583 . knowledge of this protocol and also erlang would help &amp;nbsp;.&lt;/p&gt;&lt;p&gt;to install erlang go &lt;a href=&#34;http://www.erlang.org/downloads&#34;&gt;here&lt;/a&gt;&amp;nbsp;.&amp;nbsp;&lt;/p&gt;&lt;p&gt;the files for the example is contained in this git &amp;nbsp;&lt;a href=&#34;https://github.com/nayibor/iso_process_tut_repo&#34;&gt;&lt;i&gt;repository&lt;/i&gt;&lt;/a&gt; &amp;nbsp;.&amp;nbsp;&lt;/p&gt;&lt;p&gt;Lets hit the road !!&lt;br&gt;&lt;/p&gt;&lt;h2&gt;Creating a basic tcp server in erlang&lt;/h2&gt;&lt;p&gt;lets look at the iso_process.erl file and the portions where the tcp server is created .&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;%% @doc this part is for starting the iso server &lt;br&gt;-spec start_iso_server()-&amp;gt;[pid()] | {error,term()}. &lt;br&gt;start_iso_server()-&amp;gt; ....&lt;br&gt;&lt;/p&gt;&lt;p&gt;%% @doc this part is for listener socket&lt;br&gt;-spec loop_listen(port())-&amp;gt;[port()] | {error,term()} | fun(). &lt;br&gt;loop_listen(Listen_socket)-&amp;gt;....&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;the start_iso_server function and the loop_listen function are responsible for creating the tcp server and erlang processes for handling client connection .&lt;/p&gt;&lt;p&gt;the {ok,Listen} = gen_tcp:listen(...) in &lt;b&gt;start_iso_server&lt;/b&gt; function creates the tcp listener socket and sets up pattern matching so if the listener socket &amp;nbsp;is created successfully the code goes on succesfully else it stops if there is an error(eg.. if port is being used by another program) .&amp;nbsp;&lt;/p&gt;&lt;p&gt;note that because the messages will be coming as strings and also because we want to process only one message at a time we use &lt;b&gt;[list, {packet, 0},{active, once}]&lt;/b&gt; options .strings are represented as lists in erlang so list is in there . the {packet,0} option also tells us to allow messages to flow without breaking it up .&lt;/p&gt;&lt;p&gt;&amp;nbsp;the&lt;b&gt; loop_listen&lt;/b&gt; function&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;%% @doc this part is for listener socket&lt;br&gt;-spec loop_listen(port())-&amp;gt;[port()] | {error,term()} | fun(). &lt;br&gt;loop_listen(Listen_socket)-&amp;gt;...&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&amp;nbsp;is &amp;nbsp;what waits for connections from clients and independently deal with each client connection while the loop_receive is what is responsible for sending/receiving data from clients .&lt;br&gt;&lt;/p&gt;&lt;p&gt;the &lt;b&gt;loop_receive &lt;/b&gt;function&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;%% @doc this part is for the acceptor socket &lt;br&gt;-spec loop_receive(port(),[])-&amp;gt;[pos_integer()] | {error,term()} | fun().        &lt;br&gt;loop_receive(Socket,Isom)-&amp;gt;...&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&amp;nbsp;is the function which receives communicates with clients . i.e. sends and receives data in this case iso messages from clients .&lt;/p&gt;&lt;p&gt;for every iso string(string = header+iso message) sent &amp;nbsp; a check is first done to get the header which contains the size of the iso message messsage itself . the size of the message in the header is then used to calculate &amp;nbsp;how many more bits needs to be streamed to get the whole message in . the iso string is streamed until the whole message is obtained after which it is processed with this function&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;                               Response_message = process_message(Rest),&lt;br&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;TO run the program do a git clone of the &lt;a href=&#34;https://github.com/nayibor/iso_process_tut_repo&#34;&gt;repo&lt;/a&gt;&amp;nbsp;.&lt;/p&gt;&lt;p&gt;cd to the&amp;nbsp;iso_process_tut_repo folder .&lt;/p&gt;&lt;p&gt;after that log into the erlang shell(erl or werl in windows) and run c(iso_process).&lt;/p&gt;&lt;p&gt;this compiles iso_process.erl module .&lt;/p&gt;&lt;p&gt;&amp;nbsp;then run iso_process.start_iso_server() whch starts the tcp server .&lt;/p&gt;&lt;p&gt;to send messages to server run iso_process:send_message(Message) .&lt;/p&gt;&lt;p&gt;eg .&amp;nbsp;&lt;/p&gt;&lt;p&gt;iso_process:send_message(”&lt;/p&gt;&lt;p&gt;012912007230040102B000001012312313122&lt;/p&gt;&lt;p&gt;0123400001000000011072218000000011612&lt;/p&gt;&lt;p&gt;12081731FABCDE123ABD06414243000termi&lt;/p&gt;&lt;p&gt;d1210Community106A5DFGR”).&lt;/p&gt;&lt;p&gt;you should see a print out of the isomessage showing the various fields .&lt;/p&gt;&lt;p&gt;we will go into how the message is processed and the mti,bitmap,data elements are obtained from the message in the next post as well as how to use jpos to send the messages so we learn a little about both jpos and message processing . neat huh . see u later for that !!!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>iso8583  message structure</title>
      <link>https://nayibor.github.io/post/iso8583-message-structure/</link>
      <pubDate>Mon, 05 Dec 2016 07:55:57 +0000</pubDate>
      
      <guid>https://nayibor.github.io/post/iso8583-message-structure/</guid>
      <description>&lt;p&gt;alloha.&lt;br&gt;at last i have been able to get my lazy behind to write a blog post on this .&lt;/p&gt;&lt;p&gt;About time :) .&lt;br&gt;This will be the first in a series about parsing iso8583 financial messages &amp;nbsp;using erlang .&lt;br&gt;we will get to know &lt;br&gt;about iso8583 and the message structure,&lt;br&gt;receiving iso 8583 messages over the wire using erlang tcp server and parsing the message .&amp;nbsp;&lt;br&gt;parsing those messages in various formats(text(acii),binary,custom format).&lt;/p&gt;&lt;p&gt;Here we go .&lt;/p&gt;&lt;h2&gt;First off what is iso8583 ?&lt;/h2&gt;&lt;p&gt;Simply put it is a protocol which specificies the content of financial transaction done with payment cards in the form of request/response messages as well as info on how to process the financial transaction.&lt;/p&gt;&lt;p&gt;more general info can be found on the wikipedia page about it &lt;a href=&#34;https://en.wikipedia.org/wiki/ISO_8583&#34;&gt;here&lt;/a&gt; .&lt;/p&gt;&lt;h2&gt;What are the components of an iso &amp;nbsp;message ?&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;optional header . optional zero padded header showing size of message.header size is known in advance by receipient and is specified by sender .Usually contains size of message ony but may contain size of header + size of message . An &amp;nbsp;example of a header is 0158 which means the content of the message(mti+bitmap+data elements) is 158 bytes&amp;nbsp;&lt;/li&gt;&lt;li&gt;mti(message type indicator). A 4 digit &amp;nbsp;number showing info about the message . each digit shows some info about the message . &lt;br&gt;example of an mti is 1200 meaning with the meaning below .&lt;br&gt;1 - first digit is message version - 1 message class means 1993 version &lt;br&gt;2 - second digit specifies the message class(purpose of message) &amp;nbsp;eg. authorization,reversal.etc.. 2 means financial message&lt;br&gt;0 - third digit specifies message function(how the message should flow within system) -eg. requests,advices,etc.. &amp;nbsp;0 means request&lt;br&gt;0 - fourth digit specifies message origin (where is the message coming from ) eg. from acquirer,issue etc.. 0 means acquirer&lt;/li&gt;&lt;li&gt;bitmap(primary or secondary).A 16/32 hexadecimal number showing the presence or absence of data elements . a bitmap can be a primary or a secondary bitmap . &lt;br&gt;primary means presence of &amp;nbsp;fields from 1-64 .&lt;br&gt;secondary means the presence of presence of fields greater than 64 means 64-128 .&lt;br&gt;the bitmap has to be converted from hex form to binary form where each binary digit represent presence or absence of a data element .if &amp;nbsp;if the first digit of the bitmap in binary form is 1 it means bitmap has fields greater than 64 which makes it a secondary bitmap .&lt;br&gt;An example of a bitmap is F230040102B000000000000004000000 meaning fields 1,2,3,4,7,11,12,22,32,39,41,43,44,102 are present and bitmap is a secondary bitmap due to fields greater than 64 being present .&lt;br&gt;&lt;/li&gt;&lt;li&gt;data elements . These are the &amp;nbsp;actual contents of &amp;nbsp;the financial message such as the amount of the transaction,currecy,transaction type(balance enquiry,withdrawal,etc..),card number . &lt;br&gt;there are 128 data elements from 1-128 .&amp;nbsp;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;What variants of iso messages are available?&lt;/h2&gt;&lt;p&gt;There are a few differnt variants of the iso8583 messaging format but &amp;nbsp;the most common ones are (1987 format/1993 format /2003 format ).&lt;br&gt;the specification of &amp;nbsp;the various variants specify &amp;nbsp;the position of the various data elements &amp;nbsp;as well as what format the message will be transmitted in .&lt;br&gt;proprietery/custom ones also exist based on the above ones which may be cusom format agreed to be used between two parties or internal format for one party. &amp;nbsp;&lt;br&gt;&lt;/p&gt;&lt;h2&gt;How are messages processed ?&lt;/h2&gt;&lt;p&gt;Financial messages consist of request/response messages are sent between two entities to process financial transactions &amp;nbsp; .&lt;br&gt;a tcp connection or other connection type(UDP, X.25, SDLC, SNA,ASYNC, QTP, SSL, HTTP,custom) is opened between the two entities . &lt;br&gt;Some handshake mechanism may be done to prepare both parties for sending messages &amp;nbsp; .&lt;br&gt;Messages are sent consisting of a request/response message .&lt;br&gt;Depending on connection type a persistant connection may be kept open or a connection may be closed and reopened later for subsequent messages to be sent and received.&lt;/p&gt;&lt;h2&gt;What to keep in mind when processing messages ? &lt;/h2&gt;&lt;ul&gt;&lt;li&gt;Message format (ascii,binary,custom format).eg 1993 acii,1993 binary.in what format the message will be transmitted in as well as rules to encode/decode the message .&amp;nbsp;&lt;br&gt;&lt;/li&gt;&lt;li&gt;Wire protocol (TCP/IP,UDP, X.25, SDLC, SNA,ASYNC, QTP, SSL, HTTP,custom protocol )how a message is transmitted over the wire.&lt;br&gt;&lt;/li&gt;&lt;li&gt;Message flow (e.g., send request for authorization, wait for response, retransmit, reversal).Various states the message may be in .&amp;nbsp;&lt;br&gt;&lt;/li&gt;&lt;li&gt;Optional beginning and ending headers &amp;nbsp;showing size of message and/or headers themeselves .&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Enough talking . An example please ???&lt;/h2&gt;&lt;p&gt;The assumption is that we are using iso 1992 iso8583 ascii specification for specifying message rules for encoding decoding messages .the specification will also show the data type of a field(number,string,hex,etc..),where it is variable length or not or whether it has an optional padding or not . &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;br&gt;We will deconstruct the iso message below &amp;nbsp;as an example and show the optional header,mti,bitmap,data elements in the message . &lt;br&gt;the optional header will be assumed to be 4 bytes long excluding the size of the header itself.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;Consider the iso message below&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;01581200F230040102B000000000000004000000&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;1048468112122012340000100000001107221800&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;000001161204171926FABCDE123ABD06414243&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;000termid1210Community106A5DFGR1112341234234&lt;/b&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;this is &amp;nbsp;breakdown of the message below from left to right&lt;/p&gt;&lt;ul&gt;&lt;li&gt;0158 -&amp;gt; header length(4 byte or digit header). this show the length of the message is 158 digits excluding the header&lt;br&gt;&lt;/li&gt;&lt;li&gt;1200 -&amp;gt; mti&lt;br&gt;&lt;/li&gt;&lt;li&gt;F230040102B000000000000004000000 -&amp;gt; fld 1 bitmap(secondary in this case cuz F converted into 4 digit binary number is 1111 meaning bitmap contains secondary &amp;nbsp;)&lt;br&gt;&lt;/li&gt;&lt;li&gt;104846811212 -&amp;gt; fld 2 primary account number(prefix header showing length of fld 2 is is 10 digits)&lt;br&gt;&lt;/li&gt;&lt;li&gt;201234 -&amp;gt; fld3 processing code&amp;nbsp;&lt;br&gt;&lt;/li&gt;&lt;li&gt;000010000000 -&amp;gt; fld 4 transaction amount&amp;nbsp;&lt;br&gt;&lt;/li&gt;&lt;li&gt;1107221800 -&amp;gt; fld 7 Transmission date &amp;amp; time&lt;br&gt;&lt;/li&gt;&lt;li&gt;000001 -&amp;gt; fld 11 rrn&lt;br&gt;&lt;/li&gt;&lt;li&gt;161204171926 -&amp;gt; fld 12 time local transaction&lt;br&gt;&lt;/li&gt;&lt;li&gt;FABCDE123ABD -&amp;gt; fld 22 pos data code&amp;nbsp;&lt;br&gt;&lt;/li&gt;&lt;li&gt;06414243 -&amp;gt; fld 32 Acquiring institution identification code(prefix header showing length of fld32 is 6 digits)&amp;nbsp;&lt;br&gt;&lt;/li&gt;&lt;li&gt;000 &amp;nbsp;-&amp;gt; fld 39 response code&amp;nbsp;&lt;br&gt;&lt;/li&gt;&lt;li&gt;termid12 -&amp;gt; &amp;nbsp;fld 41 terminal id&amp;nbsp;&lt;br&gt;&lt;/li&gt;&lt;li&gt;10Community1 -&amp;gt; &amp;nbsp;fld 43 location data(prefix header showing length of fld43 is 10 digits)&lt;br&gt;&lt;/li&gt;&lt;li&gt;06A5DFGR -&amp;gt; fld 44 additional response code (prefix header showing length of fld32 is 6 digits)&amp;nbsp;&lt;br&gt;&lt;/li&gt;&lt;li&gt;1112341234234 -&amp;gt; fld 102 account number&lt;br&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;this is a short summary of the basics of iso .&lt;/p&gt;&lt;p&gt;more info can be on the wikipedia page if you want to delve more deeply into it .&lt;/p&gt;&lt;p&gt;next post will be about using erlang to extract the various component (mti,bitmap,data elements) out of a message using a spec .&amp;nbsp;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Pagination using backbone.js and underscore template</title>
      <link>https://nayibor.github.io/post/pagination-using-backbonejs-and-underscore-template/</link>
      <pubDate>Sun, 03 Jul 2016 02:41:08 +0000</pubDate>
      
      <guid>https://nayibor.github.io/post/pagination-using-backbonejs-and-underscore-template/</guid>
      <description>&lt;p&gt;this post will talk about how to create a pagination area for pagination using backbone.js and underscore templates.&lt;/p&gt;&lt;p&gt;you will need to have the pagination object available on the client side in the following form before its passed to the model object.this could have been request as &amp;nbsp;part of a collection request &amp;nbsp;which had been done to get fresh data about a collection . subfields can be created for the pagination parts .&lt;/p&gt;&lt;p&gt;//sample pagintation info &amp;nbsp;returned from controller function will be passed as an &amp;nbsp; &amp;nbsp; arguement when the view is being created for the PaginateView&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;//cakephp controller example below&amp;nbsp;&lt;/b&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;class ProductController extends AppController {&lt;br&gt;public $name = &#39;Product&#39;;&lt;/p&gt;&lt;p&gt;public function products(){&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;$products = $this-&amp;gt;paginate(&#39;Product&#39;); &amp;nbsp;&lt;br&gt;$paginate_data=array();&lt;br&gt;$paginate_data[&#39;page&#39;]=$this-&amp;gt;request-&amp;gt;params[&#39;paging&#39;][&#39;Product&#39;][&#39;page&#39;];&lt;br&gt;$paginate_data[&#39;pageCount&#39;]=$this-&amp;gt;request-&amp;gt;params[&#39;paging&#39;][&#39;Product&#39;][&#39;pageCount&#39;];&lt;br&gt;$paginate_data[&#39;prevPage&#39;]=$this-&amp;gt;request-&amp;gt;params[&#39;paging&#39;][&#39;Product&#39;][&#39;prevPage&#39;];&lt;br&gt;$paginate_data[&#39;nextPage&#39;]=$this-&amp;gt;request-&amp;gt;params[&#39;paging&#39;][&#39;Product&#39;][&#39;nextPage&#39;];&lt;br&gt;//for putting the product info retrieved int a form which can be used for the backbone collection &lt;br&gt;//on the front end        &lt;br&gt;$response_array=array();&lt;br&gt;foreach($products as $val){         &lt;br&gt;response_array[]=$val[&#39;Product&#39;];&lt;br&gt;};&lt;br&gt;echo json_encode(array(&#34;pagination&#34;=&amp;gt;$paginate_data,&#34;products&#34;=&amp;gt;$response_array));&lt;br&gt;exit();&lt;/p&gt;&lt;p&gt;}}&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;b&gt;//sample pagination model with default setup&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&amp;nbsp;var PageModel = Backbone.Model.extend({&amp;nbsp;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;   defaults: {&lt;br&gt;query :’null,&lt;br&gt;    pagination : null,&lt;br&gt;  url:”http://localhost/Product/products/”&lt;br&gt;}&amp;nbsp;});&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;b&gt;//sample view for pagination item&lt;br&gt;&lt;/b&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;var PaginateView= Backbone.View.extend({&lt;br&gt;   tagname:&#39;div&#39;,&lt;br&gt;  id:&#39;page_div&#39;,&lt;br&gt;  model:PageModel,&lt;br&gt;    template: _.template($(&#39;#paginate_tmpl&#39;).html()),&lt;br&gt;   render:function(){              &lt;br&gt;    var pass_data={&lt;br&gt;     query:this.model.get(&#39;query&#39;),&lt;br&gt;  url:this.model.get(&#39;url&#39;),&lt;br&gt;  paginate:this.model.get(&#39;pagination&#39;)&lt;br&gt;   };&lt;br&gt; &amp;nbsp; &amp;nbsp; var html = this.template(pass_data);&lt;br&gt; &amp;nbsp; &amp;nbsp; this.$el.html(html);&lt;br&gt; &amp;nbsp; &amp;nbsp; return this;&lt;br&gt;     }&lt;br&gt;   });&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;b&gt;//sample creation of a pagination view with data returned from server as arguement&lt;/b&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;var pagination_data={&lt;br&gt;page:2,&lt;br&gt;pageCount:10,&lt;br&gt;prevPage:1,&lt;br&gt;nextPage:3&lt;br&gt;};&lt;br&gt;var query_data=&#34;a=1&amp;amp;b=2&amp;amp;c=3&#34;;&lt;br&gt;var url_data=$(&#34;#product_list_url&#34;).val();&lt;br&gt;var page = new PaginateView({model:new PageModel({query:query_data,url:url_data,pagination:pagination_data})});&lt;/p&gt;&lt;p&gt;&lt;b&gt;//lastly pagination underscore template&lt;/b&gt;&lt;br&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;this example works &amp;nbsp;for (first,previous,next,last)pagination type and cycling inbtween them&lt;br&gt;paginate template does some calculations using the page,pageCount,prevPage,nextPage to determine current page &lt;br&gt;and show it and hide links for the others&amp;nbsp;&lt;br&gt;you will have to use your own css here to style links&lt;/p&gt;&lt;p&gt;&amp;lt;!--&lt;/p&gt;&lt;p&gt;this template is a template for pagination &lt;br&gt;combination of underscore tempate&lt;br&gt;--&amp;gt;&lt;/p&gt;&lt;p&gt;&amp;lt;script type=&#34;text/template&#34; id=&#34;paginate_tmpl&#34;&amp;gt;&lt;/p&gt;&lt;p&gt;&amp;lt;%&lt;br&gt;//for first page of &amp;nbsp;multiple page&amp;nbsp;resultset&lt;br&gt;if(paginate.page!=paginate.pageCount &amp;amp;&amp;amp; paginate.page==1 &amp;amp;&amp;amp; !paginate.prevPage &amp;amp;&amp;amp; paginate.nextPage) &amp;nbsp;{ &amp;nbsp; &amp;nbsp;&lt;br&gt;%&amp;gt;&lt;/p&gt;&lt;p&gt;&amp;lt;span class=&#34;pglink&#34;&amp;gt;&amp;lt;&amp;lt; previous &amp;lt;/span&amp;gt;&lt;br&gt;&amp;lt;span class=&#34;pglink&#34;&amp;gt;&amp;lt;a href=&#34;&amp;lt;%= url+&#34;?page=&#34;+(paginate.page+1)+&#34;&amp;amp;&#34;+query %&amp;gt;&#34;&amp;gt;next &amp;gt;&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/span&amp;gt;&lt;br&gt;&amp;lt;span class=&#34;pglink&#34;&amp;gt;&amp;lt;a href=&#34;&amp;lt;%= url+&#34;?page=&#34;+(paginate.pageCount)+&#34;&amp;amp;&#34;+query %&amp;gt;&#34; rel=&#34;last&#34;&amp;gt;last &amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/span&amp;gt;&lt;/p&gt;&lt;p&gt;&amp;lt;%&lt;br&gt;//for pages &amp;gt; current page but less than pageCount&lt;br&gt;}else if(paginate.page &amp;gt; 1 &amp;amp;&amp;amp; paginate.page &amp;lt; paginate.pageCount){ &amp;nbsp; &lt;br&gt;%&amp;gt;&lt;/p&gt;&lt;p&gt;&amp;lt;span class=&#34;pglink&#34;&amp;gt;&amp;lt;a href=&#34;&amp;lt;%= url+&#34;?page=1&#34;+&#34;&amp;amp;&#34;+query %&amp;gt;&#34;&amp;gt;&amp;lt; first&amp;lt;/a&amp;gt;&amp;lt;/span&amp;gt;&lt;br&gt;&amp;lt;span class=&#34;pglink&#34;&amp;gt;&amp;lt;a href=&#34;&amp;lt;%= url+&#34;?page=&#34;+(paginate.page-1)+&#34;&amp;amp;&#34;+query %&amp;gt;&#34; rel=&#34;previous&#34;&amp;gt;&amp;lt;&amp;lt; previous&amp;lt;/a&amp;gt;&amp;lt;/span&amp;gt;&lt;br&gt;&amp;lt;span class=&#34;pglink&#34;&amp;gt;&amp;lt;a href=&#34;&amp;lt;%= url+&#34;?page=&#34;+(paginate.page+1)+&#34;&amp;amp;&#34;+query %&amp;gt;&#34; rel=&#34;next&#34;&amp;gt;next &amp;gt;&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/span&amp;gt;&lt;br&gt;&amp;lt;span class=&#34;pglink&#34;&amp;gt;&amp;lt;a href=&#34;&amp;lt;%= url+&#34;?page=&#34;+paginate.pageCount+&#34;&amp;amp;&#34;+query %&amp;gt;&#34; rel=&#34;last&#34;&amp;gt;last &amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/span&amp;gt;&lt;/p&gt;&lt;p&gt;&amp;lt;%&lt;br&gt;//for a single page resultset&lt;br&gt;}else if(paginate.page==paginate.pageCount &amp;amp;&amp;amp; !paginate.nextPage &amp;amp;&amp;amp; !paginate.prevPage){ &amp;nbsp; &amp;nbsp;&lt;br&gt;%&amp;gt;&lt;br&gt;&amp;lt;span class=&#34;pglink&#34;&amp;gt;&amp;lt;&amp;lt; previous&amp;lt;/span&amp;gt; &amp;nbsp;&lt;br&gt;&amp;lt;span class=&#34;pglink&#34;&amp;gt;next &amp;gt;&amp;gt;&amp;lt;/span&amp;gt; &amp;nbsp;&lt;/p&gt;&lt;p&gt;&amp;lt;% &lt;br&gt;//for last page of multi page resultset&amp;nbsp;&lt;br&gt;}else if(paginate.page==paginate.pageCount &amp;amp;&amp;amp; !paginate.nextPage &amp;amp;&amp;amp; paginate.prevPage){ &amp;nbsp; &lt;br&gt;%&amp;gt;&lt;/p&gt;&lt;p&gt;&amp;lt;span class=&#34;pglink&#34;&amp;gt;&amp;lt;a href=&#34;&amp;lt;%= url+&#34;?&#34;+query %&amp;gt;&#34;&amp;gt;&amp;lt; first&amp;lt;/a&amp;gt;&amp;lt;/span&amp;gt;&lt;br&gt;&amp;lt;span class=&#34;pglink&#34;&amp;gt;&amp;lt;a href=&#34;&amp;lt;%= url+&#34;?page=&#34;+(paginate.page-1)+&#34;&amp;amp;&#34;+query %&amp;gt;&#34;&amp;gt;&amp;lt;&amp;lt; previous&amp;lt;/a&amp;gt;&amp;lt;/span&amp;gt;&lt;br&gt;&amp;lt;span class=&#34;pglink&#34;&amp;gt;next &amp;gt;&amp;lt;/span&amp;gt; &amp;nbsp;&lt;br&gt;&amp;lt;% &amp;nbsp; &lt;br&gt;}                     &amp;nbsp; &lt;br&gt;%&amp;gt;&lt;br&gt;&amp;lt;/script&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;you can play around with the template and also the data returned from your controller to change the data returned to create more complex templates with more jump links .&lt;/p&gt;&lt;p&gt;this was just a starting point to show a sample underscore,backbone pagination template .&lt;/p&gt;&lt;p&gt;code &amp;nbsp;for tutorial can be found at this &lt;a href=&#34;https://bitbucket.org/nayibor/cake_backbone_pagination&#34;&gt;repo&lt;/a&gt;&amp;nbsp;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Cakephp 2.6.7  rawQuery defect</title>
      <link>https://nayibor.github.io/post/cakephp267-rawquery-defect/</link>
      <pubDate>Tue, 11 Aug 2015 13:42:38 +0000</pubDate>
      
      <guid>https://nayibor.github.io/post/cakephp267-rawquery-defect/</guid>
      <description>&lt;p&gt;Small observation i had with cakephp 2.6.7 .&lt;/p&gt;&lt;p&gt;I was trying to write a query with &lt;a href=&#34;http://cakephp.org/&#34;&gt;cakephp&lt;/a&gt; and&amp;nbsp; noticed that the query was not &lt;br&gt;&lt;/p&gt;&lt;p&gt;being sent to the server for processing .&lt;/p&gt;&lt;p&gt;I was using the rawQuery method and not the orm&amp;nbsp; methods like find etc...&lt;br&gt;&lt;/p&gt;&lt;p&gt;Query is &lt;br&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt; $query=&#34; SELECT id,stock_available FROM products WHERE &amp;nbsp;(id = ? and stock_available &amp;gt;= ?)or &amp;nbsp; (id &amp;nbsp;= ? and stock_available &amp;gt;= ?) FOR UPDATE&#34;;&lt;br&gt; $query_params=array(1,50,2,30);&lt;br&gt; $response = $this-&amp;gt;Product-&amp;gt;getDataSource()-&amp;gt;rawQuery($query,$query_params);&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;It was because the&amp;nbsp; &lt;a href=&#34;https://github.com/cakephp/cakephp/blob/2.7/lib/Cake/Model/Datasource/DboSource.php#L397-L436&#34;&gt;rawQuery&lt;/a&gt; method&amp;nbsp; was missing an extra option which was &lt;br&gt;&lt;/p&gt;&lt;p&gt;preventing the query from being run&amp;nbsp; due&amp;nbsp; to&amp;nbsp; confusion in this section &lt;br&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;

 &amp;nbsp; &amp;nbsp; &amp;nbsp;       return $this-&amp;gt;execute($sql, $params); &amp;nbsp; &amp;nbsp;

 &amp;nbsp; &amp;nbsp;

 &amp;nbsp; &amp;nbsp;
 &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp; &lt;br&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;This was accepting two parameters instead of three and due to this was &lt;br&gt;&lt;/p&gt;&lt;p&gt;mistaking the $params value for the options value thus query was not run .&lt;br&gt;&lt;/p&gt;&lt;p&gt;query was being run as &lt;br&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;public function rawQuery($sql, $params = array()) {

 &amp;nbsp; &amp;nbsp;




 &amp;nbsp; &amp;nbsp;

 &amp;nbsp; &amp;nbsp;

 &amp;nbsp; &amp;nbsp;
 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;br&gt;

 &amp;nbsp; &amp;nbsp; &amp;nbsp;       $this-&amp;gt;took = $this-&amp;gt;numRows = false;

 &amp;nbsp; &amp;nbsp;

 &amp;nbsp; &amp;nbsp;

 &amp;nbsp; &amp;nbsp;
 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 

 &amp;nbsp; &amp;nbsp;

 &amp;nbsp; &amp;nbsp;
 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;br&gt;&lt;b&gt;

 &amp;nbsp; &amp;nbsp; &amp;nbsp;       return $this-&amp;gt;execute($sql, $params); &amp;nbsp; &amp;nbsp;

 &amp;nbsp; &amp;nbsp;

 &amp;nbsp; &amp;nbsp;
 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/b&gt;&lt;br&gt;

 &amp;nbsp; &amp;nbsp; &amp;nbsp;   }&lt;br&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Instead of &lt;br&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;public function rawQuery($sql, $params = array()) {

 &amp;nbsp; &amp;nbsp;




 &amp;nbsp; &amp;nbsp;

 &amp;nbsp; &amp;nbsp;

 &amp;nbsp; &amp;nbsp;
 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;br&gt;

 &amp;nbsp; &amp;nbsp; &amp;nbsp;       $this-&amp;gt;took = $this-&amp;gt;numRows = false;

 &amp;nbsp; &amp;nbsp;

 &amp;nbsp; &amp;nbsp;

 &amp;nbsp; &amp;nbsp;
 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;

 &amp;nbsp; &amp;nbsp;

 &amp;nbsp; &amp;nbsp;
 &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp; &lt;br&gt;&lt;b&gt;

 &amp;nbsp; &amp;nbsp; &amp;nbsp;       return $this-&amp;gt;execute($sql, array(), $params); &amp;nbsp; &amp;nbsp;

 &amp;nbsp; &amp;nbsp;

 &amp;nbsp; &amp;nbsp;
 &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp; &lt;/b&gt;&lt;br&gt;

 &amp;nbsp; &amp;nbsp; &amp;nbsp;   }&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;It has subsequently been fixed .&lt;/p&gt;&lt;p&gt;Issue is at this &lt;a href=&#34;https://github.com/cakephp/cakephp/issues/6992/&#34;&gt;link&lt;/a&gt; . &lt;br&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>